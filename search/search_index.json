{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#formationflight","title":"FormationFlight","text":"<p>Open-Source Inter-UAS Positioning &amp; Telemetry for FPV Pilots</p> <p>Quick Start  Download Firmware  Join our Discord </p>"},{"location":"faq/","title":"FAQ","text":""},{"location":"faq/#who-is-formationflight-for","title":"Who is FormationFlight for?","text":"<p>FormationFlight runs in tandem with your flight control software (Betaflight, iNav, or Ardupilot). It relays information about UAVs in the area to the flight controller for display on the OSD. FormationFlight uses LoRa or ESPNOW to broadcast position, altitude, speed and aircraft name, and listens for other UAVs so your flight controller's OSD can display this information</p>"},{"location":"faq/#what-relation-does-this-have-to-inav-radar","title":"What relation does this have to iNav Radar?","text":"<p>FormationFlight started as a fork of iNav Radar by OlivierC to add a few hardware targets, but rapidly grew into a substantially different project. It was renamed and detached from iNav Radar in June of 2023. The old project's name (ESP32-INAV-RADAR) quickly became invalid once it ran on ESP8266 and with Ardupilot and Betaflight, so a new name was chosen: FormationFlight</p>"},{"location":"faq/#what-changes-were-made-as-compared-to-inav-radar","title":"What changes were made as compared to iNav Radar?","text":"<p>Many features were added over the development process, but the highlights are:</p> <ul> <li>Increased update rate from 1Hz to 10Hz</li> <li>Support 6 simultaneous users rather than 4</li> <li>Add encryption support for privacy</li> <li>Port codebase to run on both ESP8266 &amp; ESP32</li> <li>Added 2.4GHz LoRa support</li> <li>Added a WiFi configuration and monitoring system</li> <li>Added WiFi OTA firmware updates</li> <li>Added support for the ESP series built-in espnow functionality, which uses the internal WiFi chip.</li> <li>Support directly-attached GPS &amp; MSP GPS injection so F411 boards can be used with FF</li> <li>Significantly rewrote and refactored the code into modules (Display, Config, etc.) for easier maintenance</li> </ul>"},{"location":"faq/#what-do-i-need-to-use-formationflight","title":"What do I need to use FormationFlight?","text":"<p>You'll need a small radio attached to your flight controller that communicates with other FormationFlight users. The preferred hardware choice are 2.4GHz receivers intended for the ExpressLRS project. These receivers are extremely small (10mm x 10mm), lightweight (0.5g), and inexpensive ($10 USD) compared to other hardware choices. They communicate over 2.4GHz LoRa and can achieve ranges of 3-5km easily, with some hardware capable of significantly more.</p>"},{"location":"faq/#does-this-support-dji-osd","title":"Does this support DJI OSD?","text":"<p>Yesish. FormationFlight's OSD support is flight controller-specific. All three of the supported platforms will work with a full MSP OSD, like FPV.WTF's MSP-OSD, Walksnail, DJI O3, or HDZero.</p> <p>However, a Caddx Vista system will not work without FPV.WTF's MSP-OSD.</p>"},{"location":"faq/#does-this-support-tbs-crossfire-irc-ghost-tbs-tracer-dragonlink-frsky-ezuhf-etc","title":"Does this support TBS Crossfire, IRC Ghost, TBS Tracer, DragonLink, FrSky, EzUHF, etc?","text":"<p>FormationFlight is RC control link agnostic. FormationFlight is commonly used with ExpressLRS hardware since it's small, lightweight, and inexpensive, but it will work with whatever control link you like (or none at all!)</p>"},{"location":"faq/#is-this-remoteid","title":"Is this RemoteID?","text":"<p>NO. FormationFlight is very fundamentally distinct from Remote ID. FormationFlight uses a completely different format to Remote ID, and supports encryption for additional privacy if so desired. At this time, there are no plans to support Remote ID payloads in FormationFlight. If that is a feature we consider in the future, it will be strictly opt-in, off by default.</p>"},{"location":"faq/#i-need-help-where-can-i-find-more-information","title":"I need help, where can I find more information?","text":"<p>Join our friendly Discord server! FormationFlight developers and users hang out in #help-and-support </p> <p>Join our Discord </p>"},{"location":"getting-started/","title":"Getting Started with FormationFlight","text":""},{"location":"getting-started/#what-is-formationflight","title":"What is FormationFlight?","text":"<p>FormationFlight is open-source inter-UAS positioning &amp; telemetry for FPV pilots. Have you ever lost your friend while flying FPV as a group, had a friend want to join up who can't find you, or wanted to chase cars / do motion cinematic work more easily? FormationFlight is for you!</p>"},{"location":"getting-started/#how-does-formationflight-work","title":"How does FormationFlight work?","text":"<p>Using a small additional radio board attached to your flight controller, FormationFlight broadcasts your position information to other pilots in the area, and places the position information from other pilots into your flight controller's OSD through MSP.</p>"},{"location":"getting-started/#what-hardware-should-i-use-for-formationflight","title":"What hardware should I use for FormationFlight?","text":"<p>Presently, the best boards to use are repurposed ExpressLRS receivers like the HappyModel EP1 or similar. Note that using ExpressLRS itself is not required to use FormationFlight. FormationFlight is RC-link agnostic and works with TBS Crossfire, TBS Tracer, IRC Ghost, DragonLink, FrSky, whatever you may choose to use, and requires its own hardware, it just happens that ExpressLRS hardware makes a good platform for FormationFlight.</p> <p>FormationFlight supports a 2.4GHz LoRa, 900MHz LoRa, 433MHz LoRa, and 2.4GHz ESPNOW. 2.4GHz LoRa is highly recommended, and will achieve approximately 5-10km of range under normal conditions. FormationFlight has been tested to run next to ExpressLRS 2.4GHz without meaningfully degrading the performance of either system. FormationFlight runs at 10mW and at the low end of the ExpressLRS hop table.</p>"},{"location":"getting-started/#setting-up-your-formationflight-system","title":"Setting up your FormationFlight system","text":""},{"location":"getting-started/#connect","title":"Connect","text":"<p>To flash FormationFlight firmware to your FormationFlight radio, you must first connect the radio device to a PC. For some boards (ESP dev boards like the Lolin or TTGO series) this can be done with a USB connection. For others like ExpressLRS receivers, you must use an external UART interface, commonly referred to as \"an FTDI\". </p>"},{"location":"getting-started/#connect-boards-with-usb","title":"Connect boards with USB","text":"<p>Flashing dev boards with USB is easy! Just connect your board via USB and continue to the flashing section below</p>"},{"location":"getting-started/#connect-boards-without-usb","title":"Connect boards without USB","text":"<p>To flash boards without built-in USB, you'll need a UART interface. An example of one of these boards is here.</p> <p>Connect your board according to the diagram below.</p> <p></p> <p>Now you'll need to put the board into bootloader mode - this is done by connecting the GPIO0 pin to ground. On ExpressLRS receivers for example, there's a pad marked \"BOOT\". This pad must be connected to ground while power is applied to the board to enter bootloader mode. Once your board is in bootloader mode, continue to the flashing section.</p>"},{"location":"getting-started/#flash","title":"Flash","text":""},{"location":"getting-started/#install-esp-flasher","title":"Install ESP flasher","text":"<p>You can download an easy to use ESP flasher tool from Jason8266's ESP_Flasher repo. This tool makes it easy to install the FormationFlight firmware on your ESP board of choice.</p> <p>Download Flasher </p>"},{"location":"getting-started/#download-pre-built-binaries","title":"Download pre-built binaries","text":"<p>A simple way to install FormationFlight is by downloading pre-built binaries from GitHub Releases. Choose the correct binary file for your board (for example, <code>expresslrs_rx_2400</code> for a 2.4GHz ExpressLRS receiver without PA/LNA like the HappyModel EP1/EP2).</p> <p>See the list of supported hardware for other targets.</p> <p>Download Firmware </p>"},{"location":"getting-started/#flash-your-board","title":"Flash your board","text":"<p>Configure ESP-Flasher with the serial port of your board, and select the firmware.bin file for your board</p> <p></p>"},{"location":"getting-started/#install","title":"Install","text":"<p>Your FormationFlight radio should be attached to a spare UART on your flight controller. As with any UART, make sure to cross over the RX &amp; TX lines, and to give the radio power from a 5V connection.</p> <p>If you're out of UARTs (such as if you're using an F411 flight controller), you can try out GPS passthrough.</p>"},{"location":"getting-started/#configure","title":"Configure","text":"<p>FormationFlight is designed to require minimal configuration of its own. Your flight controller software however will need to be configured to talk to FormationFlight</p>"},{"location":"getting-started/#inav","title":"iNav","text":"<p>More Info </p> <p>iNav includes native support for FormationFlight. Follow their documentation on enabling the HUD here and don't forget to enable the crosshair OSD element.</p> <p>Note that iNav's implementation uses a \"HUD\" design, where MUSTARDTIGER's Ardupilot and Betaflight implementations use a simpler \"vector to point\" implementation like the home arrow.</p> <p>The Radar OSD can be seen in the middle of this screenshot (indicating peer \"B\") </p>"},{"location":"getting-started/#ardupilot","title":"ArduPilot","text":"<p>More Info </p> <p>As of 2023-06, ArduPilot does not yet natively support FormationFlight. However, the FormationFlight development team has an early release fork of ArduPilot which supports FormationFlight, available here. Be warned that this is prerelease software. Assume that it will crash your plane, kick your dog, and set your house on fire. With that in mind, the developers have been flying this modified version for a few months now without issue.</p> <p>The Radar OSD can be seen in the bottom-left of this screenshot (beginning with \"C\") </p>"},{"location":"getting-started/#betaflight","title":"Betaflight","text":"<p>As of 2023-06, Betaflight does not yet natively support FormationFlight. However, the FormationFlight development team has an early release fork of Betaflight which supports FormationFlight, available here. Be warned that this is prerelease software. Assume that it will crash your quad, kick your dog, and set your house on fire. With that in mind, the developers have been flying this modified version for a few months now without issue.</p> <p>Configuration of this fork is left as an exercise to the reader. OSD element positioning is CLI-only and hasn't been tested / polished nearly as much as Ardupilot. If you have questions, Join us on the Discord.</p>"},{"location":"getting-started/#test","title":"Test","text":"<p>Now that your FormationFlight setup is installed, flashed, and running, let's test it to make sure everything is configured properly. You can use the peer spoof endpoint to inject peers and make sure your flight controller understands them properly</p> <ol> <li>Power up your FC &amp; FormationFlight setup</li> <li>Connect to the WiFi Network for your FormationFlight radio using a PC. The network name and password are documented here.</li> <li>Wait until your FC has GPS lock by watching your OSD or telemetry</li> <li>Confirm your FormationFlight setup has connected to the FC and pulled GPS - visit http://192.168.4.1/gnssmanager/status and look for lat/lon values<ul> <li>If your FormationFlight setup isn't showing GPS values, make sure it can see the FC by visiting http://192.168.4.1/ and looking at the \"host\" parameter - if it displays \"NoFC\", your FormationFlight setup can't talk to your flight controller, and you should check its wiring and pins</li> </ul> </li> <li>Open command prompt or terminal on your PC and enter the following command to enable spoofing on FormationFlight: <pre><code>$ curl -X POST http://192.168.4.1/peermanager/spoof\n</code></pre></li> <li>Confirm that the command has returned <code>OK</code> as a result</li> <li>Observe your OSD - you should see 5 peers all around you at varying distances from 100m to 600m dependent on setup. Note: iNav HUD does not activate until a heading is established, so if you only have a GPS connected, you might need to walk outside with the aircraft until a heading can be calculated by iNav.</li> <li>Make sure to power cycle the system before you fly to disable spoofing mode!</li> </ol> <p>If you run into any trouble, visit our troubleshooting section, or come to the FormationFlight Discord's #help-and-support channel</p>"},{"location":"hardware/","title":"FormationFlight Hardware","text":""},{"location":"hardware/#supported-hardware","title":"Supported Hardware","text":"<p>FormationFlight supports many targets for different hardware. If you don't see your hardware in this list, feel free to ask in the FormationFlight Discord</p>"},{"location":"hardware/#expresslrs-hardware","title":"ExpressLRS Hardware","text":"<p>Highly recommended for new users. The smallest, lightest, most affordable way to get started with FormationFlight.</p> Target Name Radios Supported Hardware <code>expresslrs_rx_2400</code> 2.4GHz LoRa, ESPNOW HappyModel EP1/EP2, RadioMaster RP1/RP2 BetaFPV Lite, Flywoo EL24E, Foxeer Lite, GEPRC Nano, Matek F405-WTE <code>expresslrs_rx_2400_PA</code> 2.4GHz LoRa, ESPNOW BetaFPV Nano, Jumper AION Nano, Matek R24-S <code>expresslrs_rx_2400_AntennaDiversity</code> 2.4GHz LoRa, ESPNOW Matek R24-D, RadioMaster RP3 <code>expresslrs_rx_868</code> 868MHz LoRa, ESPNOW HappyModel ES900RX <code>expresslrs_rx_915</code> 915MHz LoRa, ESPNOW HappyModel ES900RX"},{"location":"hardware/#legacy-targets","title":"Legacy Targets","text":"<p>Legacy targets from iNav Radar are also supported in FormationFlight</p> Target Name Radios Supported Hardware <code>diy_LoRa_lilygo10_433</code> 433MHz LoRa, ESPNOW TTGO/LILYGO LoRa32 v1.0 433MHz <code>diy_LoRa_lilygo10_868</code> 868MHz LoRa, ESPNOW TTGO/LILYGO LoRa32 v1.0 868MHz <code>diy_LoRa_lilygo10_915</code> 915MHz LoRa, ESPNOW TTGO/LILYGO LoRa32 v1.0 915MHz <code>diy_LoRa_lilygo14_433</code> 433MHz LoRa, ESPNOW TTGO/LILYGO LoRa32 v1.4 433MHz <code>diy_LoRa_lilygo14_868</code> 868MHz LoRa, ESPNOW TTGO/LILYGO LoRa32 v1.4 868MHz <code>diy_LoRa_lilygo14_915</code> 915MHz LoRa, ESPNOW TTGO/LILYGO LoRa32 v1.4 915MHz <code>diy_LoRa_lilygo16_433</code> 433MHz LoRa, ESPNOW TTGO/LILYGO LoRa32 v1.6 433MHz <code>diy_LoRa_lilygo16_868</code> 868MHz LoRa, ESPNOW TTGO/LILYGO LoRa32 v1.6 868MHz <code>diy_LoRa_lilygo16_915</code> 915MHz LoRa, ESPNOW TTGO/LILYGO LoRa32 v1.6 915MHz <code>diy_LoRa_lilygo20_433</code> 433MHz LoRa, ESPNOW TTGO/LILYGO LoRa32 v2.0 433MHz <code>diy_LoRa_lilygo20_868</code> 868MHz LoRa, ESPNOW TTGO/LILYGO LoRa32 v2.0 868MHz <code>diy_LoRa_lilygo20_915</code> 915MHz LoRa, ESPNOW TTGO/LILYGO LoRa32 v2.0 915MHz"},{"location":"hardware/#diy-targets","title":"DIY Targets","text":"<p>Targets for non-standard hardware that might be useful for a few folks. For example, the T-Beam has built-in OLED &amp; GPS which is nice for a beacon not attached to an FC, such as inside a car or at a landing point</p> Target Name Radios Supported Hardware <code>diy_LoRa_lilygo_t-beam_915</code> 915MHz LoRa, ESPNOW TTGO/LILYGO T-Beam 915MHz"},{"location":"hardware/#espnow-targets","title":"ESPNOW Targets","text":"<p>ESPNOW is a fallback radio protocol for FormationFlight, supported on ESP chips without LoRa. Its max range is 1.5km under ideal conditions and more like 200m under normal conditions. Prefer LoRa in every case, but ESPNOW is left as an option for those who want to use it.</p> Target Name Radios Supported Hardware <code>diy_ESPNOW_esp8266</code> ESPNOW Various ESP8266 dev boards / embedded devices <code>diy_ESPNOW_wemosd1</code> ESPNOW Wemos D1 Mini <code>diy_ESPNOW_lolin_d32</code> ESPNOW LoLin D32 ESP32 dev board <code>diy_ESPNOW_adafruit_qtpy_esp32</code> ESPNOW Adafruit QtPy ESP32 dev board"},{"location":"info/","title":"Info","text":""},{"location":"info/#rf-bands-frequencies","title":"RF Bands &amp; Frequencies","text":"<p>FormationFlight runs in multiple frequency bands using different radio systems. Given the nature of the system and its supported hardware, please be advised that use of the project is restricted to licensed amateur radio practitioners, and that it is your responsibility to conform with all applicable regulations for the environment where you'll be operating.</p> <p>Frequency allocations and settings for the system can be seen in the following files:</p> <ul> <li>Center frequencies per-band</li> <li>Modulation parameters sub-GHz</li> <li>Modulation parameters 2.4GHz</li> </ul> <p>Notably, the 2.4GHz frequency allocation &amp; bandwidth used put FormationFlight below the 2.4GHz ISM band into the 13-centimeter amateur radio band. Operation in this band without a license is not permitted.</p>"},{"location":"info/#range","title":"Range","text":"<p>FormationFlight is offered on a range of hardware and radio systems. We strongly recommend 2.4GHz LoRa for the majority of users, as its ~10km range is more than sufficient for the majority of cases.</p> <p>The estimates here consider the default transmit power (10dB for LoRa), and no occlusion. Your performance may vary.</p> Radio Type Adjustments Estimated Sensitivity Estimated Gain Adjustment Estimated Ideal Range ESPNOW PCB Antenna -80dBm -20dB 200m ESPNOW External Antenna -80dBm -12dB 500m 2.4GHz LoRa Ceramic Antenna -107dBm -5dB 5km 2.4GHz LoRa Dipole Antenna -107dBm 0dB 10km 2.4GHz LoRa LNA + Dipole -107dBm +10dB 25km 900MHz LoRa Dipole Antenna -117dBm 0dB 95km 433MHz LoRa Dipole Antenna -117dBm 0dB 200km"},{"location":"info/#espnow","title":"ESPNOW","text":"<p>ESPNOW is a protocol built in to ESP8266 and ESP32 microcontrollers. It's a short-range simple protocol for ad-hoc messaging. FormationFlight supports using both LoRa and ESPNOW. However, as of version 4.0.x, simultaneous use of LoRa and ESPNOW is not supported. It can be enabled manually, but it causes the internal timing and synchronization system to go awry. In the future, each radio protocol should have its own synchronization system so that ESPNOW &amp; LoRa can be used simultaneously, and users with different LoRa frequencies can still fly together.</p>"},{"location":"setup/","title":"Setting up FormationFlight","text":""},{"location":"troubleshooting/","title":"Troubleshooting FormationFlight","text":""},{"location":"troubleshooting/#general-troubleshooting","title":"General Troubleshooting","text":"<p>Many things in FormationFlight can be diagnosed through its HTTP JSON endpoints. To use these, first connect to the WiFi Network and follow the specific instructions below.</p>"},{"location":"troubleshooting/#how-do-i-know-if-my-flight-controller-formationflight-are-connected","title":"How do I know if my Flight Controller &amp; FormationFlight are connected?","text":"<p>Visit the System Status endpoint via WiFi and look for the <code>host</code> parameter. It'll display <code>INAV</code>, <code>ARDU</code>, or <code>BTFL</code> when a supported flight controller software is connected, or <code>NoFC</code> if none are connected.</p> <p>If <code>NoFC</code> is displayed, and your FormationFlight radio is wired to your flight controller, make sure that the RX &amp; TX wires are crossed over, and that the port is set as MSP on your flight controller software. You can follow the more specific flight controller setup pages on the left for more information on port setup.</p>"},{"location":"troubleshooting/#my-fc-ff-are-connected-but-i-cant-see-my-friends","title":"My FC &amp; FF are connected, but I can't see my friends","text":"<p>First, verify that your friends are being heard by your FormationFlight system. Visit the PeerManager status page and look for the peer count. If it's greater than <code>0</code>, FormationFlight is receiving your friends' positions, and you should follow the flight controller setup documents on the left.</p>"},{"location":"troubleshooting/#formationflight-sees-0-peers-active-but-i-have-other-peers-running-nearby","title":"FormationFlight sees 0 peers active, but I have other peers running nearby","text":"<p>First, verify that everyone is using the same band. A 433MHz FormationFlight setup can't talk to a 2.4GHz FormationFlight setup. </p> <p>We can use the RadioManager status page to tell us more about what's going on with your FormationFlight system.</p> <p>If the <code>TX</code> counters are going up when you refresh the page, that means the FF system is successfully transmitting information to your peers.</p> <p>If the <code>RX</code> counter is going up, that means the FF system has received a packet from a peer and decoded it successfully.</p> <p>The other 3 counters, <code>CRC/SIZE/VAL</code> are all failure counters.</p> <p>If <code>CRC</code> is counting up, it's likely you have a <code>GROUPKEY</code> mismatch, and should work with your flying buddies to all match up.</p> <p>If <code>SIZE</code> is counting up, you're receiving packets from a different system than FormationFlight. In small numbers this isn't a problem, but can be an indicator that the FF system may not work so well if the counter is rising quickly.</p> <p>If <code>VAL</code> is counting up, something about the information you're receiving from peers is invalid. In small numbers this isn't indicative of a problem, but counting up quickly can indicate a problem. </p>"},{"location":"wifi/","title":"FormationFlight WiFi","text":"<p>FormationFlight radios run a WiFi network for configuration and monitoring</p> <ul> <li>Name/SSID: <code>iNav Radar-XXXXXX</code> where <code>XXXXXX</code> are the last 6 characters of your ESP's internal unique ID.</li> <li>Password/PSK: <code>inavradar</code></li> <li>IP Address: http://192.168.4.1</li> </ul>"},{"location":"wifi/#api","title":"API","text":"<p>All endpoints on the WiFi interface serve a simple JSON response, and take in form data as POST for mutating responses.</p>"},{"location":"wifi/#endpoints","title":"Endpoints","text":""},{"location":"wifi/#_1","title":"/","text":"/<pre><code>{\n  \"target\":\"Lolin D32\",\n  \"version\":\"4.0.0\",\n  \"heap\":207500,\n  \"uptimeMilliseconds\":14941,\n  \"name\":\"5C0\",\n  \"longName\":\"ADF5C0\",\n  \"host\":\"NoFC\"\n}\n</code></pre> <ul> <li><code>target</code>: name of the hardware target running</li> <li><code>version</code>: version number of FormationFlight running</li> <li><code>heap</code>: bytes remaining in the system's heap memory space</li> <li><code>uptimeMilliseconds</code>: milliseconds since system boot</li> <li><code>name</code>: 3-character name advertised to peers</li> <li><code>longName</code>: 6-character autogenerated name unique to this ESP8266/ESP32</li> <li><code>host</code>: short identifier for what FC software is connected - INAV/ARDU/BTFL/NoFC</li> </ul>"},{"location":"wifi/#peermanagerstatus","title":"/peermanager/status","text":"/peermanager/status<pre><code>{\n  \"myID\": \"A\",\n  \"count\": 1,\n  \"countActive\": 1,\n  \"peers\": [\n    {\n      \"id\": \"B\",\n      \"name\": \"5C0\",\n      \"updated\": 358772,\n      \"age\": 44,\n      \"lost\": 0,\n      \"lat\": 34.015039,\n      \"lon\": -118.79132,\n      \"latRaw\": 34015039,\n      \"lonRaw\": -118791320,\n      \"alt\": 60,\n      \"groundSpeed\": 0,\n      \"groundCourse\": 0,\n      \"distance\": 1085.551147,\n      \"courseTo\": 358,\n      \"relativeAltitude\": -11,\n      \"packetsReceived\": 3235\n    }\n  ]\n}\n</code></pre> <ul> <li><code>myID</code>: timeslot index of this radio (A-F)</li> <li><code>count</code>: number of peers we're tracking</li> <li><code>countActive</code>: number of peers we've seen recently</li> <li><code>peers</code>: list of peers</li> <li><code>id</code>: timeslot index of the peer</li> <li><code>name</code>: name of the peer</li> <li><code>updated</code>: millisecond timestamp of last update</li> <li><code>age</code>: milliseconds since last update</li> <li><code>lost</code>: 0 or 2, 2 indicates lost for legacy reasons</li> <li><code>lat</code>: decimal coordinate latitude of the peer</li> <li><code>lon</code>: decimal coordinate longitude of the peer</li> <li><code>latRaw</code>: compressed coordinate latitude of the peer as sent OTA</li> <li><code>lonRaw</code>: compressed coordinate longitude of the peer as sent OTA</li> <li><code>alt</code>: altitude in meters of the peer</li> <li><code>groundSpeed</code>: speed of the peer in km/h</li> <li><code>groundCourse</code>: ground course of the peer in degrees (0 is north)</li> <li><code>distance</code>: calculated distance in meters from us to peer</li> <li><code>courseTo</code>: course we'd have to follow to meet peer</li> <li><code>relativeAltitude</code>: difference in meters between our altitude and the peer's</li> <li><code>packetsReceived</code>: number of packets received on this timeslot</li> </ul>"},{"location":"wifi/#radiomanagerstatus","title":"/radiomanager/status","text":"/radiomanager/status<pre><code>{\n  \"radios\": [\n    {\n      \"status\":\"ESPNOW @ CH1\",\n      \"counters\":\"[4919TX/0RX] [0CRC/0SIZE/0VAL]\",\n      \"enabled\":true\n    },\n    {\n      \"status\":\"LoRa SX128X @ 2400.00MHz (10dBm)\",\n      \"counters\":\"[4919TX/0RX] [0CRC/0SIZE/0VAL]\",\n      \"enabled\":true\n    }\n  ]\n}\n</code></pre> <ul> <li><code>radios</code>: list of radios on the system</li> <li><code>status</code>: short radio-specific status string</li> <li><code>counters</code>: number of packets transmitted, received, and rejected for the 3 reasons listed (bad CRC, bad size, failed validation)</li> <li><code>enabled</code>: whether or not the radio is enabled</li> </ul>"},{"location":"wifi/#todomustardtiger-document-remaining-endpoints","title":"TODO(MUSTARDTIGER) Document remaining endpoints","text":""},{"location":"advanced/","title":"Advanced Topics","text":"<p>The topics on this page have a limited audience and often require some degree of development experience. If you are curious about anything on this page and get lost, feel free to reach out on the FormationFlight Discord.</p>"},{"location":"advanced/#custom-build-defines","title":"Custom build defines","text":"<p>There are some common compile-time build flags one may wish to pass to change the behavior of FormationFlight. The flags and their behavior are specified here.</p>"},{"location":"advanced/#lora-power","title":"LoRa Power","text":"<p>FormationFlight defaults to very low output power; LoRa has tremendous range (10km+) even at these very low power levels, and keeping power low helps to reduce interference with other systems on the same band like your control link.</p> <p>If you feel the need to change the targeted output power of a FormationFlight system, please keep in mind whether there is an attached PA affecting the actual output power of the system. For example, the <code>expresslrs_rx_2400_PA_via_UART</code> has <code>LORA_POWER=-10</code>, but it passes through a PA which re-amplifies the signal back up to a higher power. Running the SX1280 at +13dBm into the PA is probably a very bad idea.</p> <pre><code>-D LORA_POWER=10\n</code></pre>"},{"location":"advanced/#msp-gps-injection","title":"MSP GPS Injection","text":"<p>Certain flight controller hardware like the F411 is severely limited on UARTs. FormationFlight includes the ability to read directly attached GPS hardware and to inject the readings into your flight controller as MSP GPS. This is pre-alpha as of 2023-07, but in short, you need to add the following defines to the FormationFlight build target, specific to your hardware, and attach an NMEA-speaking GPS to the pins specified. FormationFlight will do its best to autodiscover the baud rate of your GPS.</p> <pre><code>-D GNSS_ENABLED=1\n-D GNSS_UART_INDEX=2\n-D GNSS_PIN_RX=34\n-D GNSS_PIN_TX=12\n-D GNSS_INJECT\n</code></pre>"},{"location":"advanced/#encryption","title":"Encryption","text":"<p>FormationFlight supports encryption. OTA packets are sent by default using AES-128-XTS with a key derived from the <code>GROUPKEY</code> specified at compile time. The default <code>GROUPKEY</code> is <code>opensesame</code>, allowing FormationFlight users to see each other by default, but also to provide some additional protections against invalid packets (that is to say, a packet must both decrypt and pass validation to be passed through the stack), which prevents mostly-zero packets from validating.</p> <p>Note that we use the XTS mode; this isn't really secure at all given we use a static \"tweak\". The stated goal of this feature is to keep disparate groups from seeing each other and to maybe prevent passive snooping, not to prevent coordinated attacks. Coordinated attack prevention would necessitate a stream cipher which requires keeping &amp; sending counters and nonces which just aren't worth it for this project. </p> <p>If you wish to keep your own group separate from other FormationFlight groups, you can change the <code>GROUPKEY</code> at compile time through a custom define:</p> <pre><code>-D GROUPKEY=\"hunter2\"\n</code></pre>"},{"location":"advanced/#wifi-flashing","title":"WiFi Flashing","text":"<p>FormationFlight supports WiFi OTA firmware upgrades through the standard espota protocol. The easiest way to use this function is to choose the \"Upload\" action on any of the targets ending in <code>_via_WiFi</code> in PlatformIO, but a tool to make OTA flashing easier is planned.</p>"},{"location":"advanced/#useful-snippets","title":"Useful snippets","text":"<p>Since certain parameters of FormationFlight can be changed via the HTTP API, certain snippets can be useful to copy-and-paste.</p> <pre><code># Disable radio #1 (LoRa)\ncurl -X POST http://192.168.4.1/radiomanager/radio_set_enabled -d \"index=1&amp;status=false\"\n# Enable radio #1 (LoRa)\ncurl -X POST http://192.168.4.1/radiomanager/radio_set_enabled -d \"index=1&amp;status=true\"\n# Begin spoofing GPS location of this FF radio\ncurl -X POST http://192.168.4.1/gnssmanager/spoof -d \"lat=45.171546&amp;lon=5.722387\"\n# Begin spoofing peers\ncurl -X POST http://192.168.4.1/mspmanager/spoof\n# Reboot the FormationFlight radio\ncurl -X POST http://192.168.4.1/system/reboot\n# Put the FormationFlight radio into bootloader mode\ncurl -X POST http://192.168.4.1/system/bootloader\n</code></pre>"},{"location":"flight-controller/ardupilot/","title":"Setting up ArduPilot with FormationFlight","text":"<p>This document assumes you already have experience with Ardupilot, including manipulating parameters directly. If you're not familiar with this process, read through the ArduPilot Documentation.</p>"},{"location":"flight-controller/ardupilot/#build","title":"Build","text":"<p>Presently, ArduPilot does not support FormationFlight natively. However, the FormationFlight development team has written a fork of ArduPilot.</p> <p>In order to build ArduPilot with FormationFlight support, follow the ArduPilot document on \"building the code\", but clone MUSTARDTIGERFPV's ardupilot fork repo instead of the upstream. The rest of the build process is the same.</p>"},{"location":"flight-controller/ardupilot/#configure","title":"Configure","text":"<p>You will need to adjust a few parameters directly; this can be done in Mission Planner through the Full Parameter List.</p>"},{"location":"flight-controller/ardupilot/#enable-radar-support","title":"Enable Radar support","text":"<p>Set the Ardupilot parameter <code>RADAR_TYPE</code>. This must be set to <code>1</code> for MSP Radar, which is the only form supported at the moment.</p>"},{"location":"flight-controller/ardupilot/#set-the-serial-port-for-msp","title":"Set the serial port for MSP","text":"<p>Find the correct <code>SERIALX_PROTOCOL</code> instance for the serial port on which your Radar module is connected. You'll then set <code>SERIALX_PROTOCOL</code> to <code>32</code> for MSP. <code>SERIALX_BAUD</code> and other related settings should be kept at their default, which is 115200 baud.</p>"},{"location":"flight-controller/ardupilot/#enable-the-radar-osd","title":"Enable the Radar OSD","text":"<p>In the Onboard OSD section of Mission Planner, enable the <code>RADAR</code> element and set its X/Y positions. The current (2023-07) design takes up two lines of OSD space, the top for horizontal offset and the bottom for vertical. This may change in the future, but plan for 2 lines of space when placing it in your OSD.</p> <p>The Radar OSD can be seen in the bottom-left of this screenshot (beginning with \"C\")</p> <p></p>"},{"location":"flight-controller/inav/","title":"Setting up iNav with FormationFlight","text":""},{"location":"flight-controller/inav/#configure","title":"Configure","text":""},{"location":"flight-controller/inav/#set-the-serial-port-for-msp","title":"Set the serial port for MSP","text":"<p>In the \"Ports\" section of the iNav Configurator, find the port on which you've connected your FormationFlight device. Enable the MSP switch, and Save.</p>"},{"location":"flight-controller/inav/#enable-the-radar-osd","title":"Enable the Radar OSD","text":"<p>Follow the iNav documentation to enable OSD Radar, namely the <code>osd_hud_radar_</code> items. Note: iNav HUD does not activate until a heading is established, so if you only have a GPS connected, you might need to walk outside with the aircraft until a heading can be calculated by iNav.</p>"},{"location":"flight-controller/inav/#examples","title":"Examples","text":""},{"location":"flight-controller/inav/#walksnail","title":"Walksnail","text":"<p>The Radar OSD can be seen in the middle of this screenshot (indicating peer \"B\") </p>"},{"location":"flight-controller/inav/#analog","title":"Analog","text":"<p>Please contribute your analog iNav FormationFlight screenshots! Send them to MUSTARDTIGER on the Discord.</p>"}]}